{"name":"Joyquery","tagline":"Javascript library implementing emulation of CSS selectors lookup, as document.querySelector.","body":"### joyquery library\r\nThis is Javascript library that implements selector queries on DOM tree. It does the same job as embedded document.querySelector does, so it can be used in browsers that miss this modern facility (like MSIE prior version 8).\r\n\r\nAlso joyquery enhances selectors language to provide more useful features. Joyquery allows to call Javascript functions from a selector query to perform complex tests on elements. For example:\r\n\r\n```\r\nvar elements = joyquery\r\n(\t\"div > p:contains-word-Hello\",\r\n\tnull,\r\n\t{\tcontains_word_Hello: function()\r\n\t\t{\treturn (this.node.textContent || this.node.innerText || '').indexOf('Hello') != -1;\r\n\t\t}\r\n\t}\r\n).get();\r\n```\r\n\r\nAlso supports axises like in XPATH.\r\n\r\n```\r\nvar elements = joyquery(\"figure preceding-sibling::div\").get();\r\n```\r\n\r\nHowever currently there are features that querySelector has which are not implemented. See Features.\r\n\r\nJoyquery is iterable.\r\n\r\n```\r\nfor (var elem, it=joyquery('div > a'); elem=it();)\r\n{\t console.log(elem);\r\n}\r\n```\r\n\r\nIn this case elements are not stored in array, but new element is searched and retrieved each time you call the iterator.\r\n\r\nThe library file in minified format is 8.7KiB (gzipped 4KiB).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}